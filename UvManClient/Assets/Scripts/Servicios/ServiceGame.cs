//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Net.Sockets;
using UnityEngine;


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IGameService", CallbackContract=typeof(IGameServiceCallback))]
public interface IGameService {
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseASalaPrivada", ReplyAction="http://tempuri.org/IGameService/UnirseASalaPrivadaResponse")]
    GameService.Dominio.Enum.EnumEstadoDeUnirseASala UnirseASalaPrivada(string Id, LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseASala", ReplyAction="http://tempuri.org/IGameService/UnirseASalaResponse")]
    bool UnirseASala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
    GameService.Dominio.Enum.EnumEstadoCrearSalaConId CrearSala(string Id, bool EsSalaPublica, LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/VerificarSiEstoyEnSala", ReplyAction="http://tempuri.org/IGameService/VerificarSiEstoyEnSalaResponse")]
    bool VerificarSiEstoyEnSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCuentasEnMiSala", ReplyAction="http://tempuri.org/IGameService/ObtenerCuentasEnMiSalaResponse")]
    LogicaDelNegocio.Modelo.CuentaModel[] ObtenerCuentasEnMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RecuperarIdDeMiSala", ReplyAction="http://tempuri.org/IGameService/RecuperarIdDeMiSalaResponse")]
    string RecuperarIdDeMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/MiSalaEsPublica", ReplyAction="http://tempuri.org/IGameService/MiSalaEsPublicaResponse")]
    bool MiSalaEsPublica(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IGameServiceCallback {
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/TerminarPartida")]
    void TerminarPartida();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SalaLlena")]
    void SalaLlena();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/NuevoCuentaEnLaSala")]
    void NuevoCuentaEnLaSala(LogicaDelNegocio.Modelo.CuentaModel cuenta);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/CuentaAbandoSala")]
    void CuentaAbandoSala(LogicaDelNegocio.Modelo.CuentaModel cuenta);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/RefrescarCuentasEnSala")]
    void RefrescarCuentasEnSala(LogicaDelNegocio.Modelo.CuentaModel[] CuentasEnMiSala);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IGameServiceChannel : IGameService, System.ServiceModel.IClientChannel {
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<IGameService>, IGameService {
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress) {
    }
    
    public GameService.Dominio.Enum.EnumEstadoDeUnirseASala UnirseASalaPrivada(string Id, LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.UnirseASalaPrivada(Id, Cuenta);
    }
    
    public bool UnirseASala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.UnirseASala(Cuenta);
    }
    
    public GameService.Dominio.Enum.EnumEstadoCrearSalaConId CrearSala(string Id, bool EsSalaPublica, LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.CrearSala(Id, EsSalaPublica, Cuenta);
    }
    
    public bool VerificarSiEstoyEnSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.VerificarSiEstoyEnSala(Cuenta);
    }
    
    public LogicaDelNegocio.Modelo.CuentaModel[] ObtenerCuentasEnMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.ObtenerCuentasEnMiSala(Cuenta);
    }
    
    public string RecuperarIdDeMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.RecuperarIdDeMiSala(Cuenta);
    }
    
    public bool MiSalaEsPublica(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.MiSalaEsPublica(Cuenta);
    }
}

namespace GameService.Dominio
{
    public class UdpReciver
    {
        private string DireccionIpDelServidor;
        private readonly int PUERTO = 8296;
        private readonly int PUERTO2 = 8297;
        private System.Net.Sockets.UdpClient ClienteUDP;
        
        public delegate void RecibirEventoEnJuego(EventoEnJuego eventoEnJuego);
        public event RecibirEventoEnJuego EventoRecibido;

        public UdpReciver(string direccionIpDelServidor)
        {
            DireccionIpDelServidor = direccionIpDelServidor;
        }
        
        public static EventoEnJuego Deserializar(byte[] byteArray)
        {
            if (byteArray == null)
            {
                return null;
            }
            using (System.IO.MemoryStream StreamDeMemoria = new System.IO.MemoryStream(byteArray))
            {
                System.Runtime.Serialization.Formatters.Binary.BinaryFormatter FormateadorBinario =
                    new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
                StreamDeMemoria.Position = 0;
                EventoEnJuego eventoEnJuego = (EventoEnJuego)FormateadorBinario.Deserialize(StreamDeMemoria);
                return eventoEnJuego;
            }
        }
        
        public void RecibirDatos()
        {
            try
            {
                ClienteUDP = new System.Net.Sockets.UdpClient(PUERTO);
            }
            catch (SocketException)
            {
                ClienteUDP = new UdpClient(PUERTO2);   
            }
            //try
            //{
                while (true)
                {
                    System.Net.IPEndPoint anyIP = 
                        new System.Net.IPEndPoint(System.Net.IPAddress.Any, 0);
                    byte[] data = ClienteUDP.Receive(ref anyIP);
                    if (data != null && data.Length > 0 )
                    {
                        EventoEnJuego eventoEnJuego = Deserializar(data);
                        EventoRecibido?.Invoke(eventoEnJuego);   
                    }
                }
            //}
            //catch (System.Exception err)
            //{
            //    System.Diagnostics.Debug.Write(err.Message);
            //}
        }

        public void LiberarRecursos()
        {
            ClienteUDP.Dispose();
        }
    }

    
    public class UdpSender
    {
        private readonly int PUERTO = 8090;
        private readonly int PUERTO2 = 8091;
        private System.Net.IPEndPoint IpEnviarPaquete;
        private System.Net.IPEndPoint IpEnviarPaquete2;
        private System.Net.Sockets.UdpClient ClienteUDP;

        public UdpSender(string direccionIp)
        {
            if(direccionIp == "localhost")
            {
                direccionIp = "127.0.0.1";
            }
            IpEnviarPaquete = new System.Net.IPEndPoint(System.Net.IPAddress.Parse(direccionIp), PUERTO);
            IpEnviarPaquete2 = new System.Net.IPEndPoint(System.Net.IPAddress.Parse(direccionIp), PUERTO2);
        }
        
        private static byte[] SerializarAArregloDeBytes(EventoEnJuego eventoEnJuego)
        {
            if (eventoEnJuego == null)
            {
                return null;
            }
            using (System.IO.MemoryStream StreamDeMemoria = new System.IO.MemoryStream())
            {
                System.Runtime.Serialization.DataContractSerializer Serializador = 
                    new System.Runtime.Serialization.DataContractSerializer(typeof(EventoEnJuego));
                Serializador.WriteObject(StreamDeMemoria, eventoEnJuego);
                return StreamDeMemoria.ToArray();
            }
        }

        public void EnviarPaquete(EventoEnJuego eventoEnJuego)
        {
            ClienteUDP = new System.Net.Sockets.UdpClient();
            if (eventoEnJuego != null)
            {
                byte[] datos = SerializarAArregloDeBytes(eventoEnJuego);
                ClienteUDP.Send(datos, datos.Length, IpEnviarPaquete);
                ClienteUDP.Send(datos, datos.Length, IpEnviarPaquete2);
            }
        }
    }
}
