//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------



using GameService.Dominio;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IGameService", CallbackContract=typeof(IGameServiceCallback))]
public interface IGameService {
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseASalaPrivada", ReplyAction="http://tempuri.org/IGameService/UnirseASalaPrivadaResponse")]
    GameService.Dominio.Enum.EnumEstadoDeUnirseASala UnirseASalaPrivada(string Id, LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseASala", ReplyAction="http://tempuri.org/IGameService/UnirseASalaResponse")]
    bool UnirseASala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
    GameService.Dominio.Enum.EnumEstadoCrearSalaConId CrearSala(string Id, bool EsSalaPublica, LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/VerificarSiEstoyEnSala", ReplyAction="http://tempuri.org/IGameService/VerificarSiEstoyEnSalaResponse")]
    bool VerificarSiEstoyEnSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCuentasEnMiSala", ReplyAction="http://tempuri.org/IGameService/ObtenerCuentasEnMiSalaResponse")]
    LogicaDelNegocio.Modelo.CuentaModel[] ObtenerCuentasEnMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RecuperarIdDeMiSala", ReplyAction="http://tempuri.org/IGameService/RecuperarIdDeMiSalaResponse")]
    string RecuperarIdDeMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/MiSalaEsPublica", ReplyAction="http://tempuri.org/IGameService/MiSalaEsPublicaResponse")]
    bool MiSalaEsPublica(LogicaDelNegocio.Modelo.CuentaModel Cuenta);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/TerminarPartida", ReplyAction="http://tempuri.org/IGameService/TerminarPartidaResponse")]
    void TerminarPartida(LogicaDelNegocio.Modelo.CuentaModel CuentaDeCorredor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/NotificarIniciarNivel", ReplyAction="http://tempuri.org/IGameService/NotificarIniciarNivelResponse")]
    void NotificarIniciarNivel(LogicaDelNegocio.Modelo.CuentaModel CuentaDelCorredor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RecuperarMejoresPuntuaciones", ReplyAction="http://tempuri.org/IGameService/RecuperarMejoresPuntuacionesResponse")]
    LogicaDelNegocio.Modelo.CuentaModel[] RecuperarMejoresPuntuaciones();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EstaLaSalaLlena", ReplyAction="http://tempuri.org/IGameService/EstaLaSalaLlenaResponse")]
    void EstaLaSalaLlena(LogicaDelNegocio.Modelo.CuentaModel CuentaEnSala);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IGameServiceCallback {
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/NotificarTerminaPartida")]
    void NotificarTerminaPartida();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SalaLlena")]
    void SalaLlena();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/NuevoCuentaEnLaSala")]
    void NuevoCuentaEnLaSala(LogicaDelNegocio.Modelo.CuentaModel cuenta);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/CuentaAbandoSala")]
    void CuentaAbandoSala(LogicaDelNegocio.Modelo.CuentaModel cuenta);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/RefrescarCuentasEnSala")]
    void RefrescarCuentasEnSala(LogicaDelNegocio.Modelo.CuentaModel[] CuentasEnMiSala);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay= true, Action="http://tempuri.org/IGameService/NuevoNivel", ReplyAction="http://tempuri.org/IGameService/NuevoNivelResponse")]
    void NuevoNivel();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IGameServiceChannel : IGameService, System.ServiceModel.IClientChannel {
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<IGameService>, IGameService {
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress) {
    }
    
    public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress) {
    }
    
    public GameService.Dominio.Enum.EnumEstadoDeUnirseASala UnirseASalaPrivada(string Id, LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.UnirseASalaPrivada(Id, Cuenta);
    }
    
    public bool UnirseASala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.UnirseASala(Cuenta);
    }
    
    public GameService.Dominio.Enum.EnumEstadoCrearSalaConId CrearSala(string Id, bool EsSalaPublica, LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.CrearSala(Id, EsSalaPublica, Cuenta);
    }
    
    public bool VerificarSiEstoyEnSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.VerificarSiEstoyEnSala(Cuenta);
    }
    
    public LogicaDelNegocio.Modelo.CuentaModel[] ObtenerCuentasEnMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.ObtenerCuentasEnMiSala(Cuenta);
    }
    
    public string RecuperarIdDeMiSala(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.RecuperarIdDeMiSala(Cuenta);
    }
    
    public bool MiSalaEsPublica(LogicaDelNegocio.Modelo.CuentaModel Cuenta) {
        return base.Channel.MiSalaEsPublica(Cuenta);
    }
    
    public void TerminarPartida(LogicaDelNegocio.Modelo.CuentaModel CuentaDeCorredor) {
        base.Channel.TerminarPartida(CuentaDeCorredor);
    }
    
    public void NotificarIniciarNivel(LogicaDelNegocio.Modelo.CuentaModel CuentaDelCorredor) {
        base.Channel.NotificarIniciarNivel(CuentaDelCorredor);
    }
    
    public LogicaDelNegocio.Modelo.CuentaModel[] RecuperarMejoresPuntuaciones() {
        return base.Channel.RecuperarMejoresPuntuaciones();
    }
    
    public void EstaLaSalaLlena(LogicaDelNegocio.Modelo.CuentaModel CuentaEnSala) {
        base.Channel.EstaLaSalaLlena(CuentaEnSala);
    }
}
namespace ConexionRed.Udp
{
    public class UdpReciverClient
    {
        private UdpClient ClienteUDP;

        public delegate void RecibirEventoEnJuego(EventoEnJuego eventoEnJuego);
        public event RecibirEventoEnJuego EventoRecibido;
        private int PuertoEscucha1;
        private int PuertoEscucha2;

        public UdpReciverClient(int Puerto1, int Puerto2)
        {
            PuertoEscucha1 = Puerto1;
            PuertoEscucha2 = Puerto2;
        }

        public static EventoEnJuego Deserializar(byte[] byteArray)
        {
            if (byteArray == null)
            {
                return null;
            }
            BinaryFormatter FormateadorBinario = new BinaryFormatter();
            using (MemoryStream StreamDeMemoria = new MemoryStream())
            {
                StreamDeMemoria.Write(byteArray, 0, byteArray.Length);
                StreamDeMemoria.Seek(0, SeekOrigin.Begin);
                EventoEnJuego eventoEnJuego = (EventoEnJuego)FormateadorBinario.Deserialize(StreamDeMemoria);
                return eventoEnJuego;
            }
        }

        public void RecibirDatos()
        {
            try
            {
                ClienteUDP = new UdpClient(PuertoEscucha1);
            }
            catch (SocketException)
            {
                ClienteUDP = new UdpClient(PuertoEscucha2);
            }

            while (true)
            {
                IPEndPoint anyIP = new IPEndPoint(IPAddress.Any, 0);
                byte[] data = ClienteUDP.Receive(ref anyIP);
                if (data != null && data.Length > 0)
                {
                    EventoEnJuego eventoEnJuego = Deserializar(data);
                    EventoRecibido?.Invoke(eventoEnJuego);
                }
            }
        }

        public void LiberarRecursos()
        {
            if (ClienteUDP != null)
            {
                ClienteUDP.Dispose();
            }

        }
    }
}


